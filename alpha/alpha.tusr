C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta
      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)

      integer e,f,eg

      e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = rayleigh*temp

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq2(q) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real q(lx1, ly1, lz1, lelt)

c      if (ifcoup) then
c         call nekMOAB_import_vars(tTag, 0, q)
c      elseif (ifvcoup) then
c         call nekMOAB_import_vars(vtTag, 1, q)
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
c      use ifport, only : random_number, random_seed
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'ZPER'

      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)
      common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta

      integer e,eg
      integer i,j,ij, k
      integer ppm, pps

      real delta, eps, kx, ky
      integer kmax, kmin

      real amp(4, 64*64)
      real rtmp
      integer kwav(2,64*64)
      save amp, kwav

      integer init
      save init
      data init / 0 /

      integer key
      save    key
      data    key  / 9999 /

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0

      if (init == 0) then
        ij = 0
        do i = 0, kmax / {kscal}
	  do j = kmin / {kscal} -i, kmax / {kscal}
            kx = i * {kscal}
            ky = j * {kscal}
	    if (sqrt(kx*kx+ky*ky) > kmax) then
              exit
            else if (j.ge.0 .and. sqrt(kx*kx+ky*ky).ge.kmin) then
              call random_number(rtmp)
              if (rtmp < 0.01) then 
                ij = ij + 1
                do k = 1,4
                  call random_number(amp(k,ij))
                  amp(k,ij) = amp0*2.*(amp(k,ij)-0.5)/sqrt(kx*kx+ky*ky)
                enddo
                kwav(1,ij) = kx
                kwav(2,ij) = ky
              endif
	    endif
          enddo
	enddo
	init = ij
	write(*,*) "Inited", ij
        write(*,*) kwav(:,1:ij)
      endif

      zz = 0.
c      if (x > 1./3. .and. x < 2./3. .and. y>1./3. .and. y<2./3.) then
c        zz = zz + sin(3 * pi * x)*sin(3 * pi * y)
c      endif
      do i = 1, init
        zz = zz + amp(1,i)*cos(kwav(1,i)*2*pi*x)*cos(kwav(2,i)*2*pi*y)
        zz = zz + amp(2,i)*cos(kwav(1,i)*2*pi*x)*sin(kwav(2,i)*2*pi*y)
        zz = zz + amp(3,i)*sin(kwav(1,i)*2*pi*x)*cos(kwav(2,i)*2*pi*y)
        zz = zz + amp(4,i)*sin(kwav(1,i)*2*pi*x)*sin(kwav(2,i)*2*pi*y)
      enddo
      zz = -(z + zz)/delta
c      write(*,*) "zz=", zz

      e = gllel(eg)
      temp = atwood*atan(zz)/pi 
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      if (istep.eq.0) call outpost(vx,vy,vz,pr,t,'   ')

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta

      atwood = {atwood} 
      kmax = {kmax}
      kmin = {kmin}
      amp0 = {amp0}
      rayleigh = 9.8
      delta = 0.5 * 1 * ({extent_mesh[2]} - ({root_mesh[2]})) / ({shape_mesh[2]} * {order})

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
