C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      common /myvalues/ rayleigh, atwood, delta
      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)

      integer e,f,eg

      e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = rayleigh*temp

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq2(q) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real q(lx1, ly1, lz1, lelt)

c      if (ifcoup) then
c         call nekMOAB_import_vars(tTag, 0, q)
c      elseif (ifvcoup) then
c         call nekMOAB_import_vars(vtTag, 1, q)
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
c      use ifport, only : random_number, random_seed
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'ZPER'

      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)
      common /myvalues/ rayleigh, atwood, delta

      integer e,eg
      integer i,j,ij, k
      integer ppm, pps

      real delta, eps

      real amp(4, 4096)
      real rtmp
      integer kwav(2, 4096)
      save amp, kwav

      integer init
      save init
      data init / 0 /

      integer key
      save    key
      data    key  / 9999 /

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0

      if (init == 0) then
        open(unit=33, file='IC.dat', status='OLD')
        read(33,*) ij
        do i = 1, ij
          read(33,*) kwav(1,i), kwav(2,i), 
     +               amp(1,i), amp(2,i), amp(3,i), amp(4,i)
        enddo
	init = ij
	write(*,*) "Inited", ij
        write(*,*) kwav(:,1:ij)
      endif

      zz = 0.
      do i = 1, init
        zz = zz + amp(1,i)*cos(kwav(1,i)*2*pi*x)*cos(kwav(2,i)*2*pi*y)
        zz = zz + amp(2,i)*cos(kwav(1,i)*2*pi*x)*sin(kwav(2,i)*2*pi*y)
        zz = zz + amp(3,i)*sin(kwav(1,i)*2*pi*x)*cos(kwav(2,i)*2*pi*y)
        zz = zz + amp(4,i)*sin(kwav(1,i)*2*pi*x)*sin(kwav(2,i)*2*pi*y)
      enddo
      zz = -(z + zz)/delta
c      write(*,*) "zz=", zz

      e = gllel(eg)
      temp = atwood*derf(zz)/2.
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      if (istep.eq.0) call outpost(vx,vy,vz,pr,t,'   ')

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      common /myvalues/ rayleigh, atwood, delta

      atwood = {atwood} 
      rayleigh = 9.8
      delta = {delta} 
c     delta = 0.5 * 1 * ({extent_mesh[2]} - ({root_mesh[2]})) / ({shape_mesh[2]} * {order})

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
