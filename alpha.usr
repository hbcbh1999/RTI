C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff  = 1.E-31
      utrans = 1.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      common /myvalues/ rayleigh
      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)

      integer e,f,eg

      e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
c     ffz = rayleigh*(temp-tz_mean(ix,iy,iz,e))
      ffz = rayleigh*temp

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq2(q) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real q(lx1, ly1, lz1, lelt)

c      if (ifcoup) then
c         call nekMOAB_import_vars(tTag, 0, q)
c      elseif (ifvcoup) then
c         call nekMOAB_import_vars(vtTag, 1, q)
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
c      use ifport, only : random_number, random_seed
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'ZPER'
      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)

      integer e,eg
      integer i,j,ij
      real atwood, k_width, sat
      integer ppm, pps

      real delta, eps
      integer mode_u, mode_l

      real amp(1024, 1024)
      save amp

      integer init
      save init
      data init / 0 /

      integer key
      save    key
      data    key  / 9999 /

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0

      atwood = 0.001
      k_width = 0.5
      sat = 0.1
      ppm = 8
      pps = 2

      delta = (pps * 0.1) / (256)
      mode_u = (256 / ppm)
      mode_l = (1-k_width) * mode_u + 0.5

      if (init == 0) then
        do i = 1, mode_u
	  do j = 1, mode_u
	    ij = i + 1024*j
c	    call random_seed(put=ij)
            call random_number(amp(i,j))
            amp(i,j) = sat * (amp(i,j)-0.5) / sqrt(real(i*i + j*j))
c          write(*,*) "Initing: ", i, amp(i) 
          enddo
	enddo
	init = 1
	write(*,*) "Inited"
      endif

      zz = 0.
c      if (x > 1./3. .and. x < 2./3. .and. y>1./3. .and. y<2./3.) then
c        zz = zz + sin(3 * pi * x)*sin(3 * pi * y)
c      endif
      do i = 1, mode_u
        do j = 1, mode_u
	  if (sqrt(real(i*i + j*j)) < mode_u .and. 
     +        sqrt(real(i*i + j*j)) > mode_l) then
            zz = zz + amp(i,j) * sin(i * pi * x) * sin(j * pi * y)
	  endif
	enddo
      enddo
      zz = -(z + zz)/delta
c      write(*,*) "zz=", zz

      e = gllel(eg)
      tz_mean(ix,iy,iz,e) = atwood*atan(zz)/pi ! Save this to remove hydrostatic
      temp = tz_mean(ix,iy,iz,e) !+ eps*sin(16*pi*x) 
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      if (istep.eq.0) call outpost(vx,vy,vz,pr,t,'   ')

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      common /myvalues/ rayleigh

      rayleigh = 9.8


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
