!-----------------------------------------------------------------------
    subroutine uservp(ix,iy,iz,eg) ! set variable properties
    use size_m
    use nekuse
    implicit none

    integer :: ix, iy, iz
    integer :: e,f,eg

    return
    end subroutine uservp
!-----------------------------------------------------------------------
    subroutine userf(ix,iy,iz,eg) ! set acceleration term
    use size_m
    use nekuse
    implicit none

!     Note: this is an acceleration term, NOT a force!
!     Thus, ffx will subsequently be multiplied by rho(x,t).

    real :: rayleigh, atwood, amp0, delta
    common /myvalues/ rayleigh, atwood, amp0, delta

    integer :: ix, iy, iz, eg
    integer :: e,f


    ffx = 0.0
    ffy = 0.0
    ffz = rayleigh*temp

    return
    end subroutine userf
!-----------------------------------------------------------------------
    subroutine userq(ix,iy,iz,eg) ! set source term
    use size_m
    use nekuse
    implicit none

    integer :: ix, iy, iz, eg

    qvol   = 0.0

    return
    end subroutine userq
!-----------------------------------------------------------------------
    subroutine userq2(q) ! set source term
    use size_m
    use nekuse
    implicit none

    real :: q(lx1, ly1, lz1, lelt)

    return
    end subroutine userq2
!-----------------------------------------------------------------------
    subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
    use size_m
    use nekuse
    implicit none

    integer :: ix, iy, iz, iside, ieg
!      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

    ux   = 0.0
    uy   = 0.0
    uz   = 0.0
    temp = 0.0

    return
    end subroutine userbc
!-----------------------------------------------------------------------
    subroutine useric(ix,iy,iz,eg) ! set up initial conditions
!      use ifport, only : random_number, random_seed
    use size_m
    use nekuse
    use zper
    use mesh, only : start_x, end_x
    implicit none

    real :: rayleigh, atwood, amp0, delta
    common /myvalues/ rayleigh, atwood, amp0, delta

    integer :: ix, iy, iz, e, eg
    integer :: i,j,ij, k
    integer :: ppm, pps
    real, parameter :: pi = 3.14159265358

    real :: rad, mid_x(2)
    real :: zz

    ux   = 0.0
    uy   = 0.0
    uz   = 0.0

    mid_x = (start_x(1:2) + end_x(1:2))/2.
    rad = amp0 - sqrt((x - mid_x(1))**2. + (y - mid_x(2))**2. + (z - {level})**2)
    zz = max(z-{level}, rad)
    zz = -zz/delta

    temp = atwood*erf(zz)
    if (abs(temp) > 0.0001) write(*,*) "Temp?", temp, x, y, z
    return
    end subroutine useric
!-----------------------------------------------------------------------
    subroutine userchk()
    use size_m
    use tstep
    use soln
    implicit none

    if (istep == 0) call outpost(vx,vy,vz,pr,t,'   ')

    return
    end subroutine userchk
!-----------------------------------------------------------------------
    subroutine usrdat()   ! This routine to modify element vertices
    use size_m
    implicit none

    return
    end subroutine usrdat
!-----------------------------------------------------------------------
    subroutine usrdat2()  ! This routine to modify mesh coordinates
    use size_m
    implicit none

    real :: rayleigh, atwood, amp0, delta

    common /myvalues/ rayleigh, atwood, amp0, delta

    atwood = {atwood}
    amp0 = {amp0}
    rayleigh = 9.8
    delta = 0.25 * ({extent_mesh[2]} - ({root_mesh[2]})) / ({shape_mesh[2]})

    return
    end subroutine usrdat2
!-----------------------------------------------------------------------
    subroutine usrdat3()
    use size_m
    implicit none

    return
    end subroutine usrdat3
!-----------------------------------------------------------------------
