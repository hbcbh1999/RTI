C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta
      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)

      integer e,f,eg

      e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = rayleigh*temp

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq2(q) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real q(lx1, ly1, lz1, lelt)

c      if (ifcoup) then
c         call nekMOAB_import_vars(tTag, 0, q)
c      elseif (ifvcoup) then
c         call nekMOAB_import_vars(vtTag, 1, q)
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
c      use ifport, only : random_number, random_seed
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'ZPER'

      common /cmean_t/ tz_mean(lx1,ly1,lz1,lelt)
      common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta

      integer e,eg
      integer i,j,ij, k
      integer ppm, pps

      real delta, eps, kx, ky, amp0, rayleigh, atwood
      integer kmax, kmin

      integer, parameter :: maxloc = 1000
      integer, save :: nup, ndown
      integer :: max_lin
      real, save :: xloc_up(maxloc)
      real, save :: xloc_down(maxloc)
      real, save :: yloc_up(maxloc)
      real, save :: yloc_down(maxloc)
      real :: xloc, yloc, dx, dy
      real :: dist_sq

      integer init
      save init
      data init / 0 /

      if (init == 0) then
        max_lin = 2*int(kmin * sqrt(({extent_mesh[0]}-{root_mesh[0]})**2 
     +                          + ({extent_mesh[1]}-{root_mesh[1]})**2 ))
        dx = .5 / kmin / sqrt(3.)
        dy = .5 / kmin
    
        nup = 0; ndown = 0
        do i = -max_lin, max_lin
          do j = -max_lin, max_lin
            xloc = (i*sqrt(3.)/2.)/kmin
            yloc = (j + i/2.)/kmin
              nup = nup + 1
              xloc_up(nup) = xloc
              yloc_up(nup) = yloc
    
              ndown = ndown + 1
              xloc_down(ndown) = xloc + dx
              yloc_down(ndown) = yloc + dy
          enddo
        enddo
        init = 1
      endif

      zz = 0.
      dist_sq = minval((xloc_down(1:ndown) - x)**2 
     +               + (yloc_down(1:ndown) - y)**2)
      if (dist_sq > 1./kmin) write(*,*) x, y, dist_sq
      zz = zz + amp0 * exp(- dist_sq / (2.*({gauss_width}/kmin)**2))
 
      dist_sq = minval((xloc_up(1:nup) - x)**2 
     +               + (yloc_up(1:nup) - y)**2)
      if (dist_sq > 1./kmin) write(*,*) x, y, dist_sq
      zz = zz - amp0 * exp(- dist_sq / (2.*({gauss_width}/kmin)**2))


      zz = -(z + zz)/delta

      e = gllel(eg)
      temp = atwood*derf(zz)/2
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      if (istep.eq.0) call outpost(vx,vy,vz,pr,t,'   ')

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta

      atwood = {atwood} 
      kmax = {kmax}
      kmin = {kmin}
      amp0 = {amp0} / {kmin}
      rayleigh = 9.8
      delta = 0.25 * ({extent_mesh[2]} - ({root_mesh[2]})) / ({shape_mesh[2]})

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
